{
  "service": {
    "service": "react-aws",
    "serviceObject": {
      "name": "react-aws"
    },
    "provider": {
      "name": "aws",
      "stage": "prod",
      "region": "us-east-1",
      "runtime": "nodejs14.x",
      "httpApi": {
        "name": "react-aws",
        "cors": true
      },
      "environment": {
        "BUCKET_NAME": "react-aws-uploads",
        "REGION": "us-east-1"
      },
      "iam": {
        "role": {
          "name": "react-aws-role",
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:Put*",
                "s3:Get*",
                "s3:List*",
                "s3:Delete*",
                "s3:GetBucketPolicy",
                "s3:PutBucketPolicy"
              ],
              "Resource": [
                "arn:aws:s3:::react-aws-uploads/*",
                "arn:aws:s3:::react-aws-uploads"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:UpdateItem"
              ],
              "Resource": "arn:aws:dynamodb:*:*:table/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "execute-api:Invoke"
              ],
              "Resource": "arn:aws:execute-api:*:*:*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateCatLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/react-aws-prod-createCat"
            }
          },
          "ListCatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/react-aws-prod-listCats"
            }
          },
          "ShowCatLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/react-aws-prod-showCat"
            }
          },
          "EditCatLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/react-aws-prod-editCat"
            }
          },
          "DeleteCatLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/react-aws-prod-deleteCat"
            }
          },
          "ListBreedsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/react-aws-prod-listBreeds"
            }
          },
          "ListAgesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/react-aws-prod-listAges"
            }
          },
          "UploadPhotosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/react-aws-prod-uploadPhotos"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "react-aws",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/react-aws-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/react-aws-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": "react-aws-role"
            }
          },
          "CreateCatLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z/react-aws.zip"
              },
              "Handler": "dist/handler.createCat",
              "Runtime": "nodejs14.x",
              "FunctionName": "react-aws-prod-createCat",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET_NAME": "react-aws-uploads",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCatLogGroup"
            ]
          },
          "ListCatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z/react-aws.zip"
              },
              "Handler": "dist/handler.listCats",
              "Runtime": "nodejs14.x",
              "FunctionName": "react-aws-prod-listCats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET_NAME": "react-aws-uploads",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListCatsLogGroup"
            ]
          },
          "ShowCatLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z/react-aws.zip"
              },
              "Handler": "dist/handler.showCat",
              "Runtime": "nodejs14.x",
              "FunctionName": "react-aws-prod-showCat",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET_NAME": "react-aws-uploads",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ShowCatLogGroup"
            ]
          },
          "EditCatLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z/react-aws.zip"
              },
              "Handler": "dist/handler.editCat",
              "Runtime": "nodejs14.x",
              "FunctionName": "react-aws-prod-editCat",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET_NAME": "react-aws-uploads",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EditCatLogGroup"
            ]
          },
          "DeleteCatLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z/react-aws.zip"
              },
              "Handler": "dist/handler.deleteCat",
              "Runtime": "nodejs14.x",
              "FunctionName": "react-aws-prod-deleteCat",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET_NAME": "react-aws-uploads",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteCatLogGroup"
            ]
          },
          "ListBreedsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z/react-aws.zip"
              },
              "Handler": "dist/handler.listBreeds",
              "Runtime": "nodejs14.x",
              "FunctionName": "react-aws-prod-listBreeds",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET_NAME": "react-aws-uploads",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListBreedsLogGroup"
            ]
          },
          "ListAgesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z/react-aws.zip"
              },
              "Handler": "dist/handler.listAges",
              "Runtime": "nodejs14.x",
              "FunctionName": "react-aws-prod-listAges",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET_NAME": "react-aws-uploads",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListAgesLogGroup"
            ]
          },
          "UploadPhotosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z/react-aws.zip"
              },
              "Handler": "dist/handler.uploadPhotos",
              "Runtime": "nodejs14.x",
              "FunctionName": "react-aws-prod-uploadPhotos",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET_NAME": "react-aws-uploads",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadPhotosLogGroup"
            ]
          },
          "CreateCatLambdaVersiond51fvUOVxDgaEb8BQlMNdwqSVeY7Qxy20qBBswMJByU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCatLambdaFunction"
              },
              "CodeSha256": "w8H5lbWWYNGrwGFJ6HC8JOwsyrDn14Lr1kqAuPxLVGk="
            }
          },
          "ListCatsLambdaVersionyjKTYp0tHEP8qRkqXYEjzexo4Wml133Xoje1QNatU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListCatsLambdaFunction"
              },
              "CodeSha256": "w8H5lbWWYNGrwGFJ6HC8JOwsyrDn14Lr1kqAuPxLVGk="
            }
          },
          "ShowCatLambdaVersionaDGO1Iqvvish1IbdaBR8N05qbcNZ3odKYEu7uBTAQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ShowCatLambdaFunction"
              },
              "CodeSha256": "w8H5lbWWYNGrwGFJ6HC8JOwsyrDn14Lr1kqAuPxLVGk="
            }
          },
          "EditCatLambdaVersiongf484GSUtrDNe8cibXmcdNoWrNMMXrYWquFwHJBE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EditCatLambdaFunction"
              },
              "CodeSha256": "w8H5lbWWYNGrwGFJ6HC8JOwsyrDn14Lr1kqAuPxLVGk="
            }
          },
          "DeleteCatLambdaVersionKLyCmox7AcdYReIA2OXu9txJ1SejyEccgQM1A2oPfU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteCatLambdaFunction"
              },
              "CodeSha256": "w8H5lbWWYNGrwGFJ6HC8JOwsyrDn14Lr1kqAuPxLVGk="
            }
          },
          "ListBreedsLambdaVersionNZLE8yc1Ec3aOVYCg0zJ6axZmAMYRbTiiG1JpKvOVk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListBreedsLambdaFunction"
              },
              "CodeSha256": "w8H5lbWWYNGrwGFJ6HC8JOwsyrDn14Lr1kqAuPxLVGk="
            }
          },
          "ListAgesLambdaVersionBrL727n9JHHxdpXFngQcSgMwyVVQkcU7RwQk8PRco": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListAgesLambdaFunction"
              },
              "CodeSha256": "w8H5lbWWYNGrwGFJ6HC8JOwsyrDn14Lr1kqAuPxLVGk="
            }
          },
          "UploadPhotosLambdaVersionVfwynRQqWTESJmqNWLOjSWPxBUCUY2qH45RiHwU8t0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadPhotosLambdaFunction"
              },
              "CodeSha256": "w8H5lbWWYNGrwGFJ6HC8JOwsyrDn14Lr1kqAuPxLVGk="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "react-aws",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "POST",
                  "GET",
                  "PATCH",
                  "DELETE"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CreateCatLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCatLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCat": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCatLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCats": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /cats",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCat"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCat"
          },
          "ListCatsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListCatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListCats": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListCatsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCats": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cats",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListCats"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationListCats"
          },
          "ShowCatLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ShowCatLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationShowCat": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ShowCatLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCatsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /cats/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationShowCat"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationShowCat"
          },
          "EditCatLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EditCatLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEditCat": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EditCatLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchCatsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /cats/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEditCat"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEditCat"
          },
          "DeleteCatLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteCatLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteCat": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteCatLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteCatsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /cats/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteCat"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteCat"
          },
          "ListBreedsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListBreedsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListBreeds": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListBreedsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetBreeds": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /breeds",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListBreeds"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationListBreeds"
          },
          "ListAgesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListAgesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationListAges": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ListAgesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetAges": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /ages",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationListAges"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationListAges"
          },
          "UploadPhotosLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadPhotosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUploadPhotos": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UploadPhotosLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPhotos": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /photos",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUploadPhotos"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUploadPhotos"
          },
          "CatsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Cats",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "UploadsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "react-aws-uploads",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": false,
                "RestrictPublicBuckets": false
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "UploadsBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "DependsOn": [
              "UploadsBucket"
            ],
            "Properties": {
              "Bucket": "react-aws-uploads",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "PublicReadGetObject",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::react-aws-uploads/*"
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-react-aws-prod-ServerlessDeploymentBucketName"
            }
          },
          "CreateCatLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCatLambdaVersiond51fvUOVxDgaEb8BQlMNdwqSVeY7Qxy20qBBswMJByU"
            },
            "Export": {
              "Name": "sls-react-aws-prod-CreateCatLambdaFunctionQualifiedArn"
            }
          },
          "ListCatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListCatsLambdaVersionyjKTYp0tHEP8qRkqXYEjzexo4Wml133Xoje1QNatU"
            },
            "Export": {
              "Name": "sls-react-aws-prod-ListCatsLambdaFunctionQualifiedArn"
            }
          },
          "ShowCatLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ShowCatLambdaVersionaDGO1Iqvvish1IbdaBR8N05qbcNZ3odKYEu7uBTAQ"
            },
            "Export": {
              "Name": "sls-react-aws-prod-ShowCatLambdaFunctionQualifiedArn"
            }
          },
          "EditCatLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EditCatLambdaVersiongf484GSUtrDNe8cibXmcdNoWrNMMXrYWquFwHJBE"
            },
            "Export": {
              "Name": "sls-react-aws-prod-EditCatLambdaFunctionQualifiedArn"
            }
          },
          "DeleteCatLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteCatLambdaVersionKLyCmox7AcdYReIA2OXu9txJ1SejyEccgQM1A2oPfU"
            },
            "Export": {
              "Name": "sls-react-aws-prod-DeleteCatLambdaFunctionQualifiedArn"
            }
          },
          "ListBreedsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListBreedsLambdaVersionNZLE8yc1Ec3aOVYCg0zJ6axZmAMYRbTiiG1JpKvOVk"
            },
            "Export": {
              "Name": "sls-react-aws-prod-ListBreedsLambdaFunctionQualifiedArn"
            }
          },
          "ListAgesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListAgesLambdaVersionBrL727n9JHHxdpXFngQcSgMwyVVQkcU7RwQk8PRco"
            },
            "Export": {
              "Name": "sls-react-aws-prod-ListAgesLambdaFunctionQualifiedArn"
            }
          },
          "UploadPhotosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadPhotosLambdaVersionVfwynRQqWTESJmqNWLOjSWPxBUCUY2qH45RiHwU8t0"
            },
            "Export": {
              "Name": "sls-react-aws-prod-UploadPhotosLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-react-aws-prod-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-react-aws-prod-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "functionsBasePath": "dist",
      "serverless-s3-cleaner": {
        "buckets": [
          "react-aws-uploads"
        ]
      },
      "dotenv": {
        "exclude": [
          "AWS_ACCESS_KEY_ID",
          "AWS_SECRET_ACCESS_KEY",
          "AWS_SESSION_TOKEN",
          "NODE_ENV"
        ],
        "required": {
          "env": [
            "REGION"
          ],
          "file": true
        }
      }
    },
    "plugins": [
      "serverless-s3-cleaner",
      "serverless-dotenv-plugin",
      "serverless-functions-base-path"
    ],
    "pluginsData": {},
    "functions": {
      "createCat": {
        "handler": "dist/handler.createCat",
        "events": [
          {
            "httpApi": {
              "path": "/cats",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/cats"
          }
        ],
        "name": "react-aws-prod-createCat",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateCatLambdaVersiond51fvUOVxDgaEb8BQlMNdwqSVeY7Qxy20qBBswMJByU"
      },
      "listCats": {
        "handler": "dist/handler.listCats",
        "events": [
          {
            "httpApi": {
              "path": "/cats",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cats"
          }
        ],
        "name": "react-aws-prod-listCats",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListCatsLambdaVersionyjKTYp0tHEP8qRkqXYEjzexo4Wml133Xoje1QNatU"
      },
      "showCat": {
        "handler": "dist/handler.showCat",
        "events": [
          {
            "httpApi": {
              "path": "/cats/{id}",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/cats/{id}"
          }
        ],
        "name": "react-aws-prod-showCat",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ShowCatLambdaVersionaDGO1Iqvvish1IbdaBR8N05qbcNZ3odKYEu7uBTAQ"
      },
      "editCat": {
        "handler": "dist/handler.editCat",
        "events": [
          {
            "httpApi": {
              "path": "/cats/{id}",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/cats/{id}"
          }
        ],
        "name": "react-aws-prod-editCat",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EditCatLambdaVersiongf484GSUtrDNe8cibXmcdNoWrNMMXrYWquFwHJBE"
      },
      "deleteCat": {
        "handler": "dist/handler.deleteCat",
        "events": [
          {
            "httpApi": {
              "path": "/cats/{id}",
              "method": "DELETE"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/cats/{id}"
          }
        ],
        "name": "react-aws-prod-deleteCat",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteCatLambdaVersionKLyCmox7AcdYReIA2OXu9txJ1SejyEccgQM1A2oPfU"
      },
      "listBreeds": {
        "handler": "dist/handler.listBreeds",
        "events": [
          {
            "httpApi": {
              "path": "/breeds",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/breeds"
          }
        ],
        "name": "react-aws-prod-listBreeds",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListBreedsLambdaVersionNZLE8yc1Ec3aOVYCg0zJ6axZmAMYRbTiiG1JpKvOVk"
      },
      "listAges": {
        "handler": "dist/handler.listAges",
        "events": [
          {
            "httpApi": {
              "path": "/ages",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/ages"
          }
        ],
        "name": "react-aws-prod-listAges",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListAgesLambdaVersionBrL727n9JHHxdpXFngQcSgMwyVVQkcU7RwQk8PRco"
      },
      "uploadPhotos": {
        "handler": "dist/handler.uploadPhotos",
        "events": [
          {
            "httpApi": {
              "path": "/photos",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/photos"
          }
        ],
        "name": "react-aws-prod-uploadPhotos",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UploadPhotosLambdaVersionVfwynRQqWTESJmqNWLOjSWPxBUCUY2qH45RiHwU8t0"
      }
    },
    "resources": {
      "Resources": {
        "CatsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Cats",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "UploadsBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "react-aws-uploads",
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": false,
              "BlockPublicPolicy": false,
              "IgnorePublicAcls": false,
              "RestrictPublicBuckets": false
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ]
                }
              ]
            }
          }
        },
        "UploadsBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "DependsOn": [
            "UploadsBucket"
          ],
          "Properties": {
            "Bucket": "react-aws-uploads",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PublicReadGetObject",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::react-aws-uploads/*"
                }
              ]
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "react-aws",
      "useDotenv": true,
      "frameworkVersion": "3",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/cicerohen/Workspaces/Projects/cicerohen/playground/playground-react-aws/backend/.serverless/react-aws.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/react-aws/prod/1689281602415-2023-07-13T20:53:22.415Z",
    "artifact": "react-aws.zip"
  }
}